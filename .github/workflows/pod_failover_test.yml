name: Pod Failover Test
on:
    schedule:
    - cron: "0 13 * * *"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      AZURE_TENANT_ID: ${{ secrets.TenantId }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.SubscriptionId }}
      AZURE_CLIENT_ID: ${{ secrets.ClientId }}
      AZURE_CLIENT_SECRET: ${{ secrets.ClientSecret }}
      AZURE_LOCATION: northeurope
      REGISTRY: e2etest.azurecr.io/mandalay
      METRICS_ENDPOINT:  https://podfailovermetrics.westus3.cloudapp.azure.com/pod-failover
      CA_CERT: ${{secrets.CACert}}
      CLIENT_CERT: ${{secrets.ClientCert}}
      CLIENT_KEY: ${{secrets.ClientKey}}
    
    steps:
    - name: Set UUID
      id: generate-uuid
      uses: filipstefansson/uuid-action@v1

    - name: Set Azure resource group
      run: |
        echo "AZURE_RESOURCE_GROUP=k8s-e2eTest-${{ steps.generate-uuid.outputs.uuid }}-rg" >> $GITHUB_ENV
 
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Install conntrack
      run: sudo apt install conntrack

    - name: Login to Azure
      run: |
        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID

    - name: Login to aks registry
      run: az acr login --name e2etest

    - name: Build Test
      env:
        BUILD_V2: true
      run: |
        make container-all push-manifest

    - name: Create an aks cluster 
      run: |  
        ./hack/azure-cluster-up.sh --subscription $AZURE_SUBSCRIPTION_ID --location $AZURE_LOCATION --output e2eTestOutput --client-id $AZURE_CLIENT_ID --client-tenant $AZURE_TENANT_ID --client-secret $AZURE_CLIENT_SECRET --resource-group $AZURE_RESOURCE_GROUP  --template "pod-failover"
        echo "KUBECONFIG=$GITHUB_WORKSPACE/e2eTestOutput/kubeconfig/kubeconfig.${AZURE_LOCATION}.json" >> $GITHUB_ENV

    - name: Deploy the driver on the cluster
      env:
        BUILD_V2: true
      run: make e2e-bootstrap

    - name: Build controller and workload containers
      run: make pod-failover-test-containers

    - name: Create a namespace for running test workload
      run: kubectl create namespace pod-failover-ns

    - name: Create a secret with client certificates for auth
      run: kubectl create secret generic podfailover-authcerts --from-literal=ca.crt="$CA_CERT" --from-literal=client.crt="$CLIENT_CERT" --from-literal=client.key="$CLIENT_KEY" -n pod-failover-ns

    - name: Run failover tests with 1pod+1pvc config
      run: |
        # Modify the deployment file according to the test run 
        wget https://raw.githubusercontent.com/abhisheksinghbaghel/azuredisk-csi-driver/master/test/podFailover/automation-run.yaml
        sed -i 's@controller-pod-image@e2etest.azurecr.io/mandalay/controllerpod:'$GITHUB_SHA'@' automation-run.yaml
        sed -i 's@workload-pod-image@e2etest.azurecr.io/mandalay/workloadpod:'$GITHUB_SHA'@' automation-run.yaml
        sed -i 's@$(POD_FAILOVER_METRICS_SERVICE_HOST):$(POD_FAILOVER_METRICS_SERVICE_PORT_POD_FAILOVER)@'$METRICS_ENDPOINT'@' automation-run.yaml    
        sed -i 's@$(POD_COUNT)@1@' automation-run.yaml
        sed -i 's@$(PVC_PER_POD)@1@' automation-run.yaml
        sed -i 's@$(TEST_NAME)@1Pod1Pvc@' automation-run.yaml
        sed -i 's@$(AUTH_ENABLED)@true@' automation-run.yaml

        # Deploy the yaml file
        kubectl apply -f automation-run.yaml

        # Wait for the test run to complete
        kubectl wait --for=condition=complete job/pod-failover-job --timeout=70m

        # Cleanup after the test run
         kubectl delete job pod-failover-job
         rm automation-run.yaml

    - name: Run failover tests with 1pod+3pvc config
      run: |
        # Modify the deployment file according to the test run 
        wget https://raw.githubusercontent.com/abhisheksinghbaghel/azuredisk-csi-driver/master/test/podFailover/automation-run.yaml
        sed -i 's@controller-pod-image@e2etest.azurecr.io/mandalay/controllerpod:'$GITHUB_SHA'@' automation-run.yaml
        sed -i 's@workload-pod-image@e2etest.azurecr.io/mandalay/workloadpod:'$GITHUB_SHA'@' automation-run.yaml
        sed -i 's@$(POD_FAILOVER_METRICS_SERVICE_HOST):$(POD_FAILOVER_METRICS_SERVICE_PORT_POD_FAILOVER)@'$METRICS_ENDPOINT'@' automation-run.yaml    
        sed -i 's@$(POD_COUNT)@1@' automation-run.yaml
        sed -i 's@$(PVC_PER_POD)@3@' automation-run.yaml
        sed -i 's@$(TEST_NAME)@1Pod3Pvc@' automation-run.yaml
        sed -i 's@$(AUTH_ENABLED)@true@' automation-run.yaml

        # Deploy the yaml file
        kubectl apply -f automation-run.yaml

        # Wait for the test run to complete
        kubectl wait --for=condition=complete job/pod-failover-job --timeout=70m

        # Cleanup after the test run
         kubectl delete job pod-failover-job
         rm automation-run.yaml

    - name: Cleanup 
      if: ${{ always() }}
      run: ./e2eTestOutput/cluster-down.sh