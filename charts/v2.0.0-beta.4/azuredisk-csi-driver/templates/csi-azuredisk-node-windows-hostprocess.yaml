{{- if and (.Values.windows.enabled) (eq .Values.windows.useHostProcessContainers true) }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ .Values.windows.dsName }}-init
  namespace: {{ .Release.Namespace }}
data:
  Initialize-Pod.ps1: |
    New-Item -ItemType Directory -Path "C:/var/lib/kubelet/plugins/{{ .Values.driver.name }}" -Force

    $server = "https://${env:KUBERNETES_SERVICE_HOST}:${env:KUBERNETES_SERVICE_PORT_HTTPS}"
    $kubeconfig = @"
    apiVersion: v1
    kind: Config
    clusters:
    - cluster:
        certificate-authority: ca.crt
        server: $server
      name: default
    contexts:
    - context:
        cluster: default
        namespace: default
        user: default
      name: default
    current-context: default
    users:
    - name: default
      user:
        tokenFile: token
    "@

    $kubeconfig | Out-File -Encoding ascii -FilePath "${env:CONTAINER_SANDBOX_MOUNT_POINT}/var/run/secrets/kubernetes.io/serviceaccount/kubeconfig.conf"
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ .Values.windows.dsName }}
  namespace: {{ .Release.Namespace }}
{{ include "azuredisk.labels" . | indent 2 }}
spec:
  updateStrategy:
    rollingUpdate:
      maxUnavailable: {{ .Values.node.maxUnavailable }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Values.windows.dsName }}
  template:
    metadata:
{{ include "azuredisk.labels" . | indent 6 }}
        app: {{ .Values.windows.dsName }}
{{- with .Values.windows.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.node }}
{{- with .Values.windows.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
      nodeSelector:
        kubernetes.io/os: windows
{{- with .Values.windows.nodeSelector }}
{{ toYaml . | indent 8 }}
{{- end }}
      affinity:
{{- with .Values.windows.affinity }}
{{ toYaml . | indent 8 }}
{{- end }}
        nodeAffinity:
{{ toYaml .Values.windows.nodeAffinity | indent 10 }}
      priorityClassName: system-node-critical
      {{- include "azuredisk.pullSecrets" . | indent 6 }}
      securityContext:
        windowsOptions:
          hostProcess: true
          runAsUserName: "NT AUTHORITY\\SYSTEM"
      hostNetwork: true
      initContainers:
        - name: init
{{- if hasPrefix "/" .Values.image.azuredisk.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.azuredisk.repository }}:{{ .Values.image.azuredisk.tag }}"
{{- else }}
          image: "{{ .Values.image.azuredisk.repository }}:{{ .Values.image.azuredisk.tag }}"
{{- end }}
          imagePullPolicy: {{ .Values.image.azuredisk.pullPolicy }}
          command:
            - "powershell.exe"
            - "-c"
            - ".\\etc\\config\\Initialize-Pod.ps1"
          volumeMounts:
            - name: init-script
              mountPath: /etc/config
              readOnly: true
      containers:
        - name: liveness-probe
{{- if hasPrefix "/" .Values.image.livenessProbe.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
{{- else }}
          image: "{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
{{- end }}
          command:
            - "livenessprobe.exe"
          args:
            - "--csi-address=$(CSI_ENDPOINT)"
            - "--probe-timeout=3s"
            - "--health-port={{ .Values.node.livenessProbe.healthPort }}"
            - "--v=2"
          env:
            - name: CSI_ENDPOINT
              value: unix://C:\\var\\lib\\kubelet\\plugins\\{{ .Values.driver.name }}\\csi.sock
          imagePullPolicy: {{ .Values.image.livenessProbe.pullPolicy }}
        - name: node-driver-registrar
{{- if hasPrefix "/" .Values.image.nodeDriverRegistrar.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.nodeDriverRegistrar.repository }}:{{ .Values.image.nodeDriverRegistrar.tag }}"
{{- else }}
          image: "{{ .Values.image.nodeDriverRegistrar.repository }}:{{ .Values.image.nodeDriverRegistrar.tag }}"
{{- end }}
          command:
            - "csi-node-driver-registrar.exe"
          args:
            - "--v=2"
            - "--csi-address=$(CSI_ENDPOINT)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
            - "--plugin-registration-path=$(PLUGIN_REG_DIR)"
          livenessProbe:
            exec:
              command:
                - csi-node-driver-registrar.exe
                - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
                - --mode=kubelet-registration-probe
            initialDelaySeconds: 60
            timeoutSeconds: 30
          env:
            - name: CSI_ENDPOINT
              value: unix://C:\\var\\lib\\kubelet\\plugins\\{{ .Values.driver.name }}\\csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: C:\\var\\lib\\kubelet\\plugins\\{{ .Values.driver.name }}\\csi.sock
            - name: PLUGIN_REG_DIR
              value: C:\\var\\lib\\kubelet\\plugins_registry\\
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          imagePullPolicy: {{ .Values.image.nodeDriverRegistrar.pullPolicy }}
        - name: azuredisk
{{- if hasPrefix "/" .Values.image.azuredisk.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.azuredisk.repository }}:{{ .Values.image.azuredisk.tag }}"
{{- else }}
          image: "{{ .Values.image.azuredisk.repository }}:{{ .Values.image.azuredisk.tag }}"
{{- end }}
          command:
            - "azurediskplugin.exe"
          args:
            - "--kubeconfig=.\\var\\run\\secrets\\kubernetes.io\\serviceaccount\\kubeconfig.conf"
            - "--v={{ .Values.node.logLevel }}"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--nodeid=$(KUBE_NODE_NAME)"
            - "--metrics-address=0.0.0.0:{{ .Values.node.metricsPort }}"
            - "--is-node-plugin=true"
            - "--drivername={{ .Values.driver.name }}"
            - "--driver-object-namespace={{ .Values.driver.objectNamespace }}"
            - "--volume-attach-limit={{ .Values.driver.volumeAttachLimit }}"
            - "--cloud-config-secret-name={{ .Values.node.cloudConfigSecretName }}"
            - "--cloud-config-secret-namespace={{ .Values.node.cloudConfigSecretNamespace }}"
            - "--custom-user-agent={{ .Values.driver.customUserAgent }}"
            - "--user-agent-suffix={{ .Values.driver.userAgentSuffix }}"
            - "--allow-empty-cloud-config={{ .Values.node.allowEmptyCloudConfig }}"
            - "--support-zone={{ .Values.node.supportZone }}"
            - "--get-node-info-from-labels={{ .Values.windows.getNodeInfoFromLabels }}"
          ports:
            - containerPort: {{ .Values.node.livenessProbe.healthPort }}
              name: healthz
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 30
          env:
            - name: AZURE_CREDENTIAL_FILE
              valueFrom:
                configMapKeyRef:
                  name: azure-cred-file
                  key: path-windows
                  optional: true
            - name: CSI_ENDPOINT
              value: unix://C:\\var\\lib\\kubelet\\plugins\\{{ .Values.driver.name }}\\csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: AZURE_GO_SDK_LOG_LEVEL
              value: {{ .Values.driver.azureGoSDKLogLevel }}
            {{- if eq .Values.cloud "AzureStackCloud" }}
            - name: AZURE_ENVIRONMENT_FILEPATH
              value: C:\k\azurestackcloud.json
            {{- end }}
          imagePullPolicy: {{ .Values.image.azuredisk.pullPolicy }}
      volumes:
        - name: init-script
          configMap:
            name: {{ .Values.windows.dsName }}-init
            items:
              - key: "Initialize-Pod.ps1"
                path: "Initialize-Pod.ps1"
{{- end -}}
