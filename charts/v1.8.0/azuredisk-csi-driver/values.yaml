image:
  baseRepo: mcr.microsoft.com
  azuredisk:
    repository: /k8s/csi/azuredisk-csi
    tag: v1.8.0
    pullPolicy: IfNotPresent
  csiProvisioner:
    repository: /oss/kubernetes-csi/csi-provisioner
    tag: v2.2.2
    pullPolicy: IfNotPresent
  csiAttacher:
    repository: /oss/kubernetes-csi/csi-attacher
    tag: v3.3.0
    pullPolicy: IfNotPresent
  csiResizer:
    repository: /oss/kubernetes-csi/csi-resizer
    tag: v1.3.0
    pullPolicy: IfNotPresent
  livenessProbe:
    repository: /oss/kubernetes-csi/livenessprobe
    tag: v2.4.0
    pullPolicy: IfNotPresent
  nodeDriverRegistrar:
    repository: /oss/kubernetes-csi/csi-node-driver-registrar
    tag: v2.3.0
    pullPolicy: IfNotPresent

serviceAccount:
  create: true # When true, service accounts will be created for you. Set to false if you want to use your own.
  controller: csi-azuredisk-controller-sa # Name of Service Account to be created or used
  node: csi-azuredisk-node-sa # Name of Service Account to be created or used
  snapshotController: csi-snapshot-controller-sa # Name of Service Account to be created or used

rbac:
  create: true
  name: azuredisk

controller:
  name: csi-azuredisk-controller
  cloudConfigSecretName: azure-cloud-provider
  cloudConfigSecretNamespace: kube-system
  replicas: 2
  metricsPort: 29604
  livenessProbe:
    healthPort: 29602
  runOnMaster: false
  disableAvailabilitySetNodes: true
  provisionerWorkerThreads: 40
  attacherWorkerThreads: 500
  logLevel: 5
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
    - key: "node-role.kubernetes.io/controlplane"
      operator: "Exists"
      effect: "NoSchedule"
  hostNetwork: true # this setting could be disabled if controller does not depend on MSI setting
  podLabels: {}

node:
  cloudConfigSecretName: azure-cloud-provider
  cloudConfigSecretNamespace: kube-system
  maxUnavailable: 1
  metricsPort: 29605
  logLevel: 5
  livenessProbe:
    healthPort: 29603

snapshot:
  enabled: false
  name: csi-snapshot-controller
  apiVersion: beta # available values: beta, ga
  image:
    csiSnapshotter:
      repository: /oss/kubernetes-csi/csi-snapshotter
      tag: v3.0.3
      gaTag: v4.2.1
      pullPolicy: IfNotPresent
    csiSnapshotController:
      repository: /oss/kubernetes-csi/snapshot-controller
      tag: v3.0.3
      gaTag: v4.2.1
      pullPolicy: IfNotPresent
  snapshotController:
    name: csi-snapshot-controller
    replicas: 1
    podLabels: {}

feature:
  enableFSGroupPolicy: false

driver:
  name: disk.csi.azure.com
  # maximum number of attachable volumes per node,
  # maximum number is defined according to node instance type by default(-1)
  volumeAttachLimit: -1
  customUserAgent: ""
  userAgentSuffix: "OSS-helm"

linux:
  enabled: true
  dsName: csi-azuredisk-node # daemonset name
  kubelet: /var/lib/kubelet
  distro: debian # available values: debian, fedora
  enablePerfOptimization: true
  tolerations:
    - operator: "Exists"
  hostNetwork: true # this setting could be disabled if perfProfile is `none`
  podLabels: {}
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: type
              operator: NotIn
              values:
                - virtual-kubelet

windows:
  enabled: true
  dsName: csi-azuredisk-node-win # daemonset name
  kubelet: 'C:\var\lib\kubelet'
  tolerations:
    - key: "node.kubernetes.io/os"
      operator: "Exists"
      effect: "NoSchedule"
  podLabels: {}
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: type
              operator: NotIn
              values:
                - virtual-kubelet

cloud: AzurePublicCloud

## Reference to one or more secrets to be used when pulling images
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: []
# - name: "image-pull-secret"
