{{- if .Values.windows.enabled}}
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ .Values.windows.dsName }}
  namespace: {{ .Release.Namespace }}
{{ include "azuredisk.labels" . | indent 2 }}
spec:
  updateStrategy:
    rollingUpdate:
      maxUnavailable: {{ .Values.node.maxUnavailable }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Values.windows.dsName }}
  template:
    metadata:
{{ include "azuredisk.labels" . | indent 6 }}
        app: {{ .Values.windows.dsName }}
{{- with .Values.windows.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.node }}
{{- with .Values.windows.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
      nodeSelector:
        kubernetes.io/os: windows
      affinity:
        nodeAffinity:
{{ toYaml .Values.windows.nodeAffinity | indent 10 }}
      priorityClassName: system-node-critical
      {{- include "azuredisk.pullSecrets" . | indent 6 }}
      containers:
        - name: liveness-probe
          volumeMounts:
            - mountPath: C:\csi
              name: plugin-dir
{{- if hasPrefix "/" .Values.image.livenessProbe.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
{{- else }}
          image: "{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
{{- end }}
          args:
            - "--csi-address=$(CSI_ENDPOINT)"
            - "--probe-timeout=3s"
            - "--health-port={{ .Values.node.livenessProbe.healthPort }}"
            - "--v=2"
          env:
            - name: CSI_ENDPOINT
              value: unix://C:\\csi\\csi.sock
          imagePullPolicy: {{ .Values.image.livenessProbe.pullPolicy }}
          resources: {{- toYaml .Values.windows.resources.livenessProbe | nindent 12 }}
        - name: node-driver-registrar
{{- if hasPrefix "/" .Values.image.nodeDriverRegistrar.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.nodeDriverRegistrar.repository }}:{{ .Values.image.nodeDriverRegistrar.tag }}"
{{- else }}
          image: "{{ .Values.image.nodeDriverRegistrar.repository }}:{{ .Values.image.nodeDriverRegistrar.tag }}"
{{- end }}
          args:
            - "--v=2"
            - "--csi-address=$(CSI_ENDPOINT)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          livenessProbe:
            exec:
              command:
                - /csi-node-driver-registrar.exe
                - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
                - --mode=kubelet-registration-probe
            initialDelaySeconds: 60
            timeoutSeconds: 30
          env:
            - name: CSI_ENDPOINT
              value: unix://C:\\csi\\csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: C:\\var\\lib\\kubelet\\plugins\\{{ .Values.driver.name }}\\csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          imagePullPolicy: {{ .Values.image.nodeDriverRegistrar.pullPolicy }}
          volumeMounts:
            - name: kubelet-dir
              mountPath: "C:\\var\\lib\\kubelet"
            - name: plugin-dir
              mountPath: C:\csi
            - name: registration-dir
              mountPath: C:\registration
          resources: {{- toYaml .Values.windows.resources.nodeDriverRegistrar | nindent 12 }}
        - name: azuredisk
{{- if hasPrefix "/" .Values.image.azuredisk.repository }}
          image: "{{ .Values.image.baseRepo }}{{ .Values.image.azuredisk.repository }}:{{ .Values.image.azuredisk.tag }}"
{{- else }}
          image: "{{ .Values.image.azuredisk.repository }}:{{ .Values.image.azuredisk.tag }}"
{{- end }}
          args:
            - "--v={{ .Values.node.logLevel }}"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--nodeid=$(KUBE_NODE_NAME)"
            - "--metrics-address=0.0.0.0:{{ .Values.node.metrics.port }}"
            - "--is-node-plugin=true"
            - "--drivername={{ .Values.driver.name }}"
            - "--driver-object-namespace={{ .Values.driver.objectNamespace }}"
            - "--volume-attach-limit={{ .Values.driver.volumeAttachLimit }}"
            - "--cloud-config-secret-name={{ .Values.node.cloudConfigSecretName }}"
            - "--cloud-config-secret-namespace={{ .Values.node.cloudConfigSecretNamespace }}"
            - "--custom-user-agent={{ .Values.driver.customUserAgent }}"
            - "--user-agent-suffix={{ .Values.driver.userAgentSuffix }}"
            - "--allow-empty-cloud-config={{ .Values.node.allowEmptyCloudConfig }}"
          ports:
            - containerPort: {{ .Values.node.livenessProbe.healthPort }}
              name: healthz
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 30
          env:
            - name: AZURE_CREDENTIAL_FILE
              valueFrom:
                configMapKeyRef:
                  name: azure-cred-file
                  key: path-windows
                  optional: true
            - name: CSI_ENDPOINT
              value: unix://C:\\csi\\csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            {{- if eq .Values.cloud "AzureStackCloud" }}
            - name: AZURE_ENVIRONMENT_FILEPATH
              value: C:\k\azurestackcloud.json
            {{- end }}
          imagePullPolicy: {{ .Values.image.azuredisk.pullPolicy }}
          volumeMounts:
            - name: kubelet-dir
              mountPath: "C:\\var\\lib\\kubelet"
            - name: plugin-dir
              mountPath: C:\csi
            - name: azure-config
              mountPath: C:\k
            - name: csi-proxy-fs-pipe-v1
              mountPath: \\.\pipe\csi-proxy-filesystem-v1
            - name: csi-proxy-disk-pipe-v1
              mountPath: \\.\pipe\csi-proxy-disk-v1
            - name: csi-proxy-volume-pipe-v1
              mountPath: \\.\pipe\csi-proxy-volume-v1
            # these paths are still included for compatibility, they're used
            # only if the node has still the beta version of the CSI proxy
            - name: csi-proxy-fs-pipe-v1beta1
              mountPath: \\.\pipe\csi-proxy-filesystem-v1beta1
            - name: csi-proxy-disk-pipe-v1beta2
              mountPath: \\.\pipe\csi-proxy-disk-v1beta2
            - name: csi-proxy-volume-pipe-v1beta2
              mountPath: \\.\pipe\csi-proxy-volume-v1beta2
          resources: {{- toYaml .Values.windows.resources.azuredisk | nindent 12 }}
      volumes:
        - name: csi-proxy-fs-pipe-v1
          hostPath:
            path: \\.\pipe\csi-proxy-filesystem-v1
        - name: csi-proxy-disk-pipe-v1
          hostPath:
            path: \\.\pipe\csi-proxy-disk-v1
        - name: csi-proxy-volume-pipe-v1
          hostPath:
            path: \\.\pipe\csi-proxy-volume-v1
        # these paths are still included for compatibility, they're used
        # only if the node has still the beta version of the CSI proxy
        - name: csi-proxy-fs-pipe-v1beta1
          hostPath:
            path: \\.\pipe\csi-proxy-filesystem-v1beta1
        - name: csi-proxy-disk-pipe-v1beta2
          hostPath:
            path: \\.\pipe\csi-proxy-disk-v1beta2
        - name: csi-proxy-volume-pipe-v1beta2
          hostPath:
            path: \\.\pipe\csi-proxy-volume-v1beta2
        - name: registration-dir
          hostPath:
            path: {{ .Values.windows.kubelet }}\plugins_registry\
            type: Directory
        - name: kubelet-dir
          hostPath:
            path: {{ .Values.windows.kubelet }}\
            type: Directory
        - name: plugin-dir
          hostPath:
            path: {{ .Values.windows.kubelet }}\plugins\{{ .Values.driver.name }}\
            type: DirectoryOrCreate
        - name: azure-config
          hostPath:
            path: C:\k
            type: DirectoryOrCreate
{{- end -}}
