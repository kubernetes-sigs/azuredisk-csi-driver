/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/controller/azvolumeattachment.go

// Package mockattachmentprovisioner is a generated GoMock package.
package mockattachmentprovisioner

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAttachmentProvisioner is a mock of AttachmentProvisioner interface.
type MockAttachmentProvisioner struct {
	ctrl     *gomock.Controller
	recorder *MockAttachmentProvisionerMockRecorder
}

// MockAttachmentProvisionerMockRecorder is the mock recorder for MockAttachmentProvisioner.
type MockAttachmentProvisionerMockRecorder struct {
	mock *MockAttachmentProvisioner
}

// NewMockAttachmentProvisioner creates a new mock instance.
func NewMockAttachmentProvisioner(ctrl *gomock.Controller) *MockAttachmentProvisioner {
	mock := &MockAttachmentProvisioner{ctrl: ctrl}
	mock.recorder = &MockAttachmentProvisionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttachmentProvisioner) EXPECT() *MockAttachmentProvisionerMockRecorder {
	return m.recorder
}

// PublishVolume mocks base method.
func (m *MockAttachmentProvisioner) PublishVolume(ctx context.Context, volumeID, nodeID string, volumeContext map[string]string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishVolume", ctx, volumeID, nodeID, volumeContext)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishVolume indicates an expected call of PublishVolume.
func (mr *MockAttachmentProvisionerMockRecorder) PublishVolume(ctx, volumeID, nodeID, volumeContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVolume", reflect.TypeOf((*MockAttachmentProvisioner)(nil).PublishVolume), ctx, volumeID, nodeID, volumeContext)
}

// UnpublishVolume mocks base method.
func (m *MockAttachmentProvisioner) UnpublishVolume(ctx context.Context, volumeID, nodeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpublishVolume", ctx, volumeID, nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpublishVolume indicates an expected call of UnpublishVolume.
func (mr *MockAttachmentProvisionerMockRecorder) UnpublishVolume(ctx, volumeID, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpublishVolume", reflect.TypeOf((*MockAttachmentProvisioner)(nil).UnpublishVolume), ctx, volumeID, nodeID)
}
