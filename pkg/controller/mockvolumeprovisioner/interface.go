/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/controller/azvolume.go

// Package mockvolumeprovisioner is a generated GoMock package.
package mockvolumeprovisioner

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "sigs.k8s.io/azuredisk-csi-driver/pkg/apis/azuredisk/v1alpha2"
)

// MockVolumeProvisioner is a mock of VolumeProvisioner interface.
type MockVolumeProvisioner struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeProvisionerMockRecorder
}

// MockVolumeProvisionerMockRecorder is the mock recorder for MockVolumeProvisioner.
type MockVolumeProvisionerMockRecorder struct {
	mock *MockVolumeProvisioner
}

// NewMockVolumeProvisioner creates a new mock instance.
func NewMockVolumeProvisioner(ctrl *gomock.Controller) *MockVolumeProvisioner {
	mock := &MockVolumeProvisioner{ctrl: ctrl}
	mock.recorder = &MockVolumeProvisionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeProvisioner) EXPECT() *MockVolumeProvisionerMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method.
func (m *MockVolumeProvisioner) CreateVolume(ctx context.Context, volumeName string, capacityRange *v1alpha2.CapacityRange, volumeCapabilities []v1alpha2.VolumeCapability, parameters, secrets map[string]string, volumeContentSource *v1alpha2.ContentVolumeSource, accessibilityTopology *v1alpha2.TopologyRequirement) (*v1alpha2.AzVolumeStatusParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", ctx, volumeName, capacityRange, volumeCapabilities, parameters, secrets, volumeContentSource, accessibilityTopology)
	ret0, _ := ret[0].(*v1alpha2.AzVolumeStatusParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockVolumeProvisionerMockRecorder) CreateVolume(ctx, volumeName, capacityRange, volumeCapabilities, parameters, secrets, volumeContentSource, accessibilityTopology interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockVolumeProvisioner)(nil).CreateVolume), ctx, volumeName, capacityRange, volumeCapabilities, parameters, secrets, volumeContentSource, accessibilityTopology)
}

// DeleteVolume mocks base method.
func (m *MockVolumeProvisioner) DeleteVolume(ctx context.Context, volumeID string, secrets map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, volumeID, secrets)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockVolumeProvisionerMockRecorder) DeleteVolume(ctx, volumeID, secrets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockVolumeProvisioner)(nil).DeleteVolume), ctx, volumeID, secrets)
}

// ExpandVolume mocks base method.
func (m *MockVolumeProvisioner) ExpandVolume(ctx context.Context, volumeID string, capacityRange *v1alpha2.CapacityRange, secrets map[string]string) (*v1alpha2.AzVolumeStatusParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandVolume", ctx, volumeID, capacityRange, secrets)
	ret0, _ := ret[0].(*v1alpha2.AzVolumeStatusParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandVolume indicates an expected call of ExpandVolume.
func (mr *MockVolumeProvisionerMockRecorder) ExpandVolume(ctx, volumeID, capacityRange, secrets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandVolume", reflect.TypeOf((*MockVolumeProvisioner)(nil).ExpandVolume), ctx, volumeID, capacityRange, secrets)
}
